.ssh_connection_setup: &ssh_connection_setup
    - | # ssh connection setup
      chmod og= $CI_DEPLOY_USER_SSH_PRIVATE_KEY
      apk update
      apk add openssh-client

.deploy_databases:
  image: alpine:latest
  script:
    - *ssh_connection_setup
    - | # send deployment files to remote server
      mkdir -p ./${CI_JOB_ID}
      cp ./databases/vector_store/docker-compose.yml ./${CI_JOB_ID}/docker-compose.vector.yml
      cp ./databases/postgres/docker-compose.yml ./${CI_JOB_ID}/docker-compose.postgres.yml
      cp ./.env ./${CI_JOB_ID}/.env
      scp -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no -r ./${CI_JOB_ID} ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST}:/home/${CI_DEPLOY_USER}/${CI_JOB_ID}
    - | # deploy database to remote server
      ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "
      cd /home/${CI_DEPLOY_USER}/${CI_JOB_ID}
      docker login --username gitlab-ci-token --password $CI_JOB_TOKEN $CI_REGISTRY

      if [[ ! -d /data/elastic ]]; then
        echo 'elasticsearch data directory (/data/elastic) not found, please create it (owned by 1000:1000) and restart the job'
        exit 1
      fi 
      
      if [[ $(stat -c %u /data/elastic) != 1000 ]] || [[ $(stat -c %g /data/elastic) != 1000 ]]; then
        echo 'elasticsearch data directory (/data/elastic) is not owned by 1000:1000, please change ownership and restart the job'
        exit 1
      fi

      export COMPOSE_FILE=./docker-compose.vector.yml
      export COMPOSE_PROJECT_NAME=vector-store

      docker compose --env-file .env down
      docker compose --env-file .env up --detach

      export COMPOSE_FILE=./docker-compose.postgres.yml
      export COMPOSE_PROJECT_NAME=postgres

      docker compose --env-file .env down
      docker compose --env-file .env up --detach
      "

.setup_vector_store:  
  image: alpine:latest
  timeout: 3 hours
  script:
    - *ssh_connection_setup
    - | # send deployment files to remote server
      mkdir -p ./${CI_JOB_ID}
      mkdir -p ./${CI_JOB_ID}/venv
      cp -r ./pyalbert ./${CI_JOB_ID}
      cp ./.env ./${CI_JOB_ID}/.env
      sed -i~ "s/QDRANT_HOST=${CI_DEPLOY_HOST}/QDRANT_HOST=localhost/g" ./${CI_JOB_ID}/.env
      sed -i~ "s/ELASTIC_HOST=${CI_DEPLOY_HOST}/ELASTIC_HOST=localhost/g" ./${CI_JOB_ID}/.env
      sed -i~ "s/EMBEDDINGS_HOST=${CI_DEPLOY_HOST}/EMBEDDINGS_HOST=localhost/g" ./${CI_JOB_ID}/.env
      scp -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no -r ./${CI_JOB_ID} ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST}:/home/${CI_DEPLOY_USER}/${CI_JOB_ID}
    - | # setup database on remote server
      ssh -i $CI_DEPLOY_USER_SSH_PRIVATE_KEY -o StrictHostKeyChecking=no ${CI_DEPLOY_USER}@${CI_DEPLOY_HOST} "
      python3.10 -m venv ~/${CI_JOB_ID}/venv
      source ~/${CI_JOB_ID}/venv/bin/activate
      pip install ~/${CI_JOB_ID}/pyalbert/.
      ln -s ~/${CI_JOB_ID}/pyalbert ~/${CI_JOB_ID}/venv/lib/python3.10/site-packages
      export $(grep -v "^#" ~/${CI_JOB_ID}/.env | xargs)
      cd /home/${CI_DEPLOY_USER}/${CI_JOB_ID}/pyalbert

      python ./albert.py download_rag_sources
      python ./albert.py make_chunks --structured
      python ./albert.py index experiences --index-type bm25
      python ./albert.py index sheets --index-type bm25
      python ./albert.py index chunks --index-type bm25
      python ./albert.py index experiences --index-type e5
      python ./albert.py index chunks --index-type e5

      deactivate
      rm -rf ~/${CI_JOB_ID}
      "
